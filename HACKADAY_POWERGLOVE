boolean debugmode=true; //  enable/disable debugging 
int debugcounter=0; //incrementing then resetting counter for debug output 

const int xAxis = 0;  //analog sensor for X axis  
const int yAxis = 1;  // analog sensor for Y axis
int FingerV2 = 5; //powerglove index finger , on analog pin 5---will be used for left click       
int FingerV3 = 3; //powerglove middle finger , on analog pin 3 --will be used for right click
int FingerV4 = 2; //powerglove ring finger , on analog pin 2  --will be used to toggle precise mouse movement
                  //analog pin 4, the thumb sensor, is unused, as your thumb will be busy moving the joystick


//variables for finger position
int fingerstate2;  // the current reading from the input pin
int fingbool2=1;   //initial setting
int fingerstate3;            
int fingbool3=1;
int fingerstate4;              
int fingbool4=1;

//debounce code seen in various forms below is borrowed and modified from http://www.arduino.cc/en/Tutorial/debounce
int lastfingerstate2 = 1;   // the previous reading from the input pin
int lastfingerstate3 = 1;    
int lastfingerstate4 = 1;    
// the following variables are long's because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.

long fingerlastDebounceTime2 = 0;  // the last time the output pin was toggled
long fingerlastDebounceTime3 = 0;   
long fingerlastDebounceTime4 = 0;   
long fingerdebounceDelay = 100;    // the debounce time; increase this if the output flickers

int avg2=27; //average value b/w open and closed finger positions
int avg3=43; //average value b/w open and closed finger positions
int avg4=51; //average value b/w open and closed finger positions

/* The following fingers are on the following channels, followed by
boundary output (avg between open and closed)  Feel free to adjust them based on finger position desired for click to be registered by code:
ring: 2   51
middle:3  43
thumb:4   45
index: 5   27 */

 //mouse code seen in various forms below is borrowed and modified from http://www.arduino.cc/en/Tutorial/JoystickMouseControl
int range = 24;   // sensitivity: output range of X or Y movement  If this is lowered by enough, no diagonal mouse movement is registered...for some reason. 
int responseDelay = 2;       // response delay of the mouse, in ms
//int threshold = range/6;      // resting threshold
int threshold = range/4;
int center = range/2;   // resting position value
//int center = range/3;
int minima[] = { 
  1023, 1023};  // actual analogRead minima for {x, y}
int maxima[] = {
  0,0};   // actual analogRead maxima for {x, y}   This will increase as mouse is calibrated in first ~5 seconds of use
  
  
int axis[] = {xAxis, yAxis};     // pin numbers for {x, y}
int mouseReading[2];          // final mouse readings for {x, y}
boolean precisionmode= false;//precision mode, activated by ring finger
boolean borderdetect=true; //initial mouse border detection, turns off after 5 seconds. 

//led button on/off code is below:
const int buttonPin = 11;    // the number of the pushbutton pin
const int ledPin = 12;      // the number of the LED pin
int ledbuttonledState = HIGH;         // the current state of the output pin
int ledbuttonbuttonState;             // the current reading from the input pin
int ledbuttonlastButtonState = LOW;   // the previous reading from the input pin
long ledbuttonlastDebounceTime = 0;  // the last time the output pin was toggled
long ledbuttondebounceDelay = 50;    // the debounce time; increase if the output flickers

void setup() {
 // initialize the button pin as a input:
  Serial.begin(9600);
   Mouse.begin();
   
   //led button code is below
 pinMode(buttonPin, INPUT);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, ledbuttonledState);  // set initial LED state
}

void loop() {
  
  //LED button code (temporary on/off switch)  
   int ledbuttonreading = digitalRead(buttonPin); 
    if (ledbuttonreading != ledbuttonlastButtonState) {
     ledbuttonlastDebounceTime = millis();
  } 
    if ((millis() - ledbuttonlastDebounceTime) > ledbuttondebounceDelay) {    
       if (ledbuttonreading != ledbuttonbuttonState) {
      ledbuttonbuttonState = ledbuttonreading;  
           if (ledbuttonbuttonState == HIGH) {
        ledbuttonledState = !ledbuttonledState;//if button is pressed, swap the led state
      }
    }
  }
  digitalWrite(ledPin, ledbuttonledState);   
 ledbuttonlastButtonState = ledbuttonreading;
  
 //if analog read of bend sensor is larger than avg for that finger, the fraction is greater than 1, and then fingbool is true. (click)
 //if analog read is smaller than avg, fraction is less than 1,then fingbool is false. (no click)             
  fingbool2= (analogRead(FingerV2))/avg2;
  fingbool3= (analogRead(FingerV3))/avg3;
  fingbool4= (analogRead(FingerV4))/avg4;


  // check to see if you just pressed the button 
  // (i.e. the input went from 0 to 1),  and you've waited 
  // long enough since the last press to ignore any noise: 
  // If the switch changed, due to noise or pressing: 
  if (fingbool2 != lastfingerstate2) {
    fingerlastDebounceTime2 = millis();  // reset the debouncing timer
  } 
   if (fingbool4 != lastfingerstate3) {
    fingerlastDebounceTime3 = millis();  // reset the debouncing timer
  } 
  if (fingbool4 != lastfingerstate4) {
    fingerlastDebounceTime4 = millis();  // reset the debouncing timer
  } 
  //pointer finger = single click
  if ((millis() - fingerlastDebounceTime2) > fingerdebounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

   // if the button state has changed:
    if (fingbool2 != fingerstate2) {
      fingerstate2 = fingbool2;
   
   if (ledbuttonledState == HIGH) {
    if (fingbool2 == 0) {
         Mouse.press(MOUSE_LEFT);   
      }
      else  {
       Mouse.release(MOUSE_LEFT);
      }
   }
    }
  }  
  //middle finger = rightclick
    if ((millis() - fingerlastDebounceTime3) > fingerdebounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

   // if the button state has changed:
    if (fingbool3 != fingerstate3) {
      fingerstate3 = fingbool3;
   
   if (ledbuttonledState == HIGH) {
    if (fingbool3 == 0) {
         Mouse.press(MOUSE_RIGHT);
      }
      else { 
        Mouse.release(MOUSE_RIGHT);
    }
   }
  } 
    }
    //if ring finger is held down, reduce mouse speed
    if ((millis() - fingerlastDebounceTime4) > fingerdebounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

   // if the button state has changed:
    if (fingbool4 != fingerstate4) {
      fingerstate4 = fingbool4;
   
   if (ledbuttonledState == HIGH) {
    if (fingbool4 == 0) {
         precisionmode= true;
      }
      else { 
     precisionmode= false;
   }
   }
  } 
    }
lastfingerstate2 = fingbool2;
lastfingerstate3 = fingbool3;
lastfingerstate4 = fingbool4;


//mouse code is below, mostly stolen from arduino's mouse tutorial

// read and scale the two axes:
  int xReading = readAxis(0);
  int yReading = readAxis(1);
  
  if (xReading > 0){
  xReading++;}
  if (yReading < 0){
 yReading--;}
xReading = xReading * -1;//added text to invert x axis
// move the mouse:
if (ledbuttonledState == HIGH) {
  if( precisionmode == true){
    xReading=xReading/4;
        yReading=yReading/4;
  }
    Mouse.move(xReading, yReading, 0);
    delay(responseDelay);
}
   
  // debugging output
  if (debugmode==true){
   if (debugcounter > 100) {
     Serial.print("On/Off Toggle:");
    Serial.print(ledbuttonledState);
      Serial.print(" | Mouse X: ");
    Serial.print(xReading);
    Serial.print(" Y: ");
    Serial.print(yReading);
    Serial.print(" |BorderDetect:");
    Serial.print(borderdetect);
    Serial.print(" | Pointer: ");
    if (fingbool2 == 0) {
          Serial.print("Closed ");
          Serial.print(analogRead(FingerV2));
      }
      else { 
        Serial.print("Open    ");
        Serial.print(analogRead(FingerV2));
    }
       Serial.print("/");
Serial.print(avg2);
Serial.print("  Middle: ");
     if (fingbool3 == 0) {
          Serial.print("Closed ");
          Serial.print(analogRead(FingerV3));
      }
      else { 
        Serial.print("Open   ");
        Serial.print(analogRead(FingerV3));
    }
     Serial.print("/");
Serial.print(avg3);
    Serial.print(" | PrecisionMouse: ");
        if (fingbool4 == 0) {
          Serial.print("Enabled   ");
          Serial.print(analogRead(FingerV4));
      }
      else { 
        Serial.print("Disabled   ");
        Serial.print(analogRead(FingerV4));
   }
    Serial.print(" /");
Serial.println(avg4);
     
    debugcounter= 0;//reset counter
    } 
    debugcounter++;
}
}

/* reads an axis (0 or 1 for x or y) and scales the 
  analog input range to a range from 0 to <range>*/

int readAxis(int axisNumber) { //Code mostly stolen from Arduino's mouse guide webpage
  int distance = 0;    // distance from center of the output range

  // read the analog input:
  int reading = analogRead(axis[axisNumber]);

// of the current reading exceeds the max or min for this axis,
// reset the max or min:

if (millis() > 5000){ //after 5 seconds, do not allow any more border detection (mouse calibration) 
  borderdetect=false;
}

if (borderdetect==true){
  if (reading < minima[axisNumber]) {
    minima[axisNumber] = reading;
     Serial.print("Axis: ");
    Serial.print(axisNumber);
    Serial.print("\tNew Min: ");
    Serial.println(reading);
  }
  if (reading > maxima[axisNumber]) {
    maxima[axisNumber] = reading;
     Serial.print("Axis: ");
    Serial.print(axisNumber);
    Serial.print("\tNew Max: ");
    Serial.println(reading);
  }
}
  // map the reading from the analog input range to the output range:
  reading = map(reading, minima[axisNumber], maxima[axisNumber], 0, range);
 // if the output reading is outside from the
 // rest position threshold,  use it:
  if (abs(reading - center) > threshold) {
    distance = (reading - center);
  } 
  // the Y axis needs to be inverted in order to 
  // map the movemment correctly:
  if (axisNumber == 1) {
    distance = -distance;
  }
  // return the distance for this axis:
  return distance;
}
